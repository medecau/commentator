#!/usr/bin/python
# -*- coding: utf-8 -*-
from inspect import *
import inspect
import clint

class Commentator(object):
    def __init__(self, obj):
        self.obj = obj
    
    def __repr__(self):
        return self.obj.__name__
    
    @property
    def name(self):
        return self.obj.__name__
    
    @property
    def doc(self):
        return inspect.getdoc(self.obj)
    
    @property
    def members(self):
        for member in inspect.getmembers(self.obj):
            c = Commentator(member[1])
            if c.ismodule or c.isclass or c.ismethod or c.isfunction:
                yield c
    
    @property    
    def ismodule(self):
        return inspect.ismodule(self.obj)
    
    @property
    def isclass(self):
        return inspect.isclass(self.obj)
    
    @property
    def ismethod(self):
        return inspect.ismethod(self.obj)
    
    @property
    def isfunction(self):
        return inspect.isfunction(self.obj)

def doc(name):
    try:
        obj = __import__(name)
        if ismodule(obj):
            return Commentator(obj)
        else:
            print 'Error: not a module'
    except ImportError:
        print 'Error: No such module could be imported'

def main(argv):
    for arg in clint.args.all:
        #for pkg in walkpkgs(arg):
        #    print pkg
        o=doc(arg)
        print o.ismodule
        m=o.members
        for e in m:
            print e
        pass

if __name__ == '__main__':
    import sys
    main(sys.argv)